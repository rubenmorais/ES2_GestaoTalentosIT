@page "/habilidades"
@using Frontend.DtoClasses
@using Frontend.Services
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject HabilidadeService HabilidadeService

<PageTitle>Habilidades</PageTitle>

<h1>Lista de Habilidades</h1>

<input type="text" @oninput="AtualizarPesquisa" placeholder="Pesquisar Habilidades" class="form-control mb-2" />


@if (habilidades == null)
{
    <p><em>A Carregar Habilidades...</em></p>
}
else if (!habilidades.Any())
{
    <p>Nenhuma habilidade encontrada.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Categoria ID</th>
                <th>Criador ID</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hab in habilidades)
            {
                <tr>
                    <td>@hab.Nome</td>
                    <td>@hab.Categoriaid</td>
                    <td>@hab.Criadorid</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => Editar(hab.Habilidadeid)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => Apagar(hab.Habilidadeid)">Apagar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="CriarNovaHabilidade">Criar Nova Habilidade</button>

@code {
    private List<HabilidadeDTO>? habilidades;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await CarregarHabilidades();
    }

    private async Task CarregarHabilidades()
    {
        habilidades = await HabilidadeService.GetAllHabilidadesAsync();
    }
    
    private void AtualizarPesquisa(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void CriarNovaHabilidade()
    {
        // Rota do FRONTEND, não da API
        NavManager.NavigateTo("/habilidades/create");
    }

    private void Editar(int id)
    {
        NavManager.NavigateTo($"/habilidades/edit/{id}");
    }

    private async Task Apagar(int id)
    {
        if (await ConfirmAsync("Tem certeza que deseja apagar esta habilidade?"))
        {
            var sucesso = await HabilidadeService.DeleteHabilidadeAsync(id);
            if (sucesso)
            {
                await CarregarHabilidades();
            }
            else
            {
                await AlertAsync("Erro ao apagar a habilidade.");
            }
        }
    }

    private Task<bool> ConfirmAsync(string message) => Task.FromResult(true);
    private Task AlertAsync(string message)
    {
        Console.WriteLine(message);
        return Task.CompletedTask;
    }
}
