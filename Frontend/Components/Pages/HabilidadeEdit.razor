@page "/habilidades/edit/{id:int}"
@using Frontend.DtoClasses
@using Frontend.Services
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject HabilidadeService HabilidadeService

<h3>Editar Habilidade</h3>

@if (habilidade == null)
{
    <p><em>Carregando a habilidade...</em></p>
}
else
{
    <div class="mb-3">
        <label for="nome">Nome:</label>
        <input id="nome" class="form-control" @bind="habilidade.Nome" />
    </div>
    <div class="mb-3">
        <label for="categoria">Categoria ID:</label>
        <input id="categoria" type="number" class="form-control" @bind="habilidade.Categoriaid" />
    </div>
    <div class="mb-3">
        <label for="criador">Criador ID:</label>
        <input id="criador" type="number" class="form-control" @bind="habilidade.Criadorid" />
    </div>

    <button class="btn btn-success" @onclick="Salvar">Salvar</button>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
}

@code {
    [Parameter]
    public int id { get; set; }

    private HabilidadeDTO? habilidade;

    protected override async Task OnParametersSetAsync()
    {
        // Utiliza o serviço para carregar a habilidade com base no id
        habilidade = await HabilidadeService.GetHabilidadeByIdAsync(id);
        if (habilidade == null)
        {
            await AlertAsync("Habilidade não encontrada.");
            NavManager.NavigateTo("/habilidades");
        }
    }

    private async Task Salvar()
    {
        if (habilidade == null)
            return;

        try
        {
            // Atualiza a habilidade usando o serviço
            var updated = await HabilidadeService.UpdateHabilidadeAsync(habilidade);
            NavManager.NavigateTo("/habilidades");
        }
        catch (Exception ex)
        {
            await AlertAsync($"Erro ao atualizar a habilidade: {ex.Message}");
        }
    }

    private void Cancelar()
    {
        NavManager.NavigateTo("/habilidades");
    }

    private Task AlertAsync(string message)
    {
        // Aqui você pode usar uma implementação de alerta mais elaborada (ex: IJSRuntime)
        Console.WriteLine(message);
        return Task.CompletedTask;
    }
}
