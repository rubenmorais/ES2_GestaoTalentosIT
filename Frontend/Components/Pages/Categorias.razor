@page "/categorias"
@rendermode InteractiveServer
@using Frontend.DtoClasses
@using Frontend.DTOClasses
@using Frontend.Services
@inject CategoriaService CategoriaService

<PageTitle>Categorias</PageTitle>

<h3>Lista de Categorias</h3>

@if (!string.IsNullOrEmpty(pageErrorMessage))
{
    <div class="alert alert-danger">
        @pageErrorMessage
    </div>
}

<input type="text" @oninput="AtualizarPesquisa" placeholder="Pesquisar categorias" class="form-control mb-2" />

@if (categorias == null)
{
    <p>A carregar categorias...</p>
}
else if (filteredCategorias.Count == 0)
{
    <p>Nenhuma categoria encontrada.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in CategoriasNaPagina)
            {
                <tr>
                    <td>@categoria.Categoria</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => AbrirModalEdicao(categoria)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => ApagarCategoria(categoria.CategoriaId)">Apagar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination d-flex justify-content-between align-items-center">
        <div>
            <button class="btn btn-secondary" @onclick="PaginaAnterior" disabled="@(!PodeIrParaPaginaAnterior)">Anterior</button>
            <span>Página @paginaAtual de @totalPaginas</span>
            <button class="btn btn-secondary" @onclick="PaginaProxima" disabled="@(!PodeIrParaPaginaProxima)">Próxima</button>
        </div>
    </div>
}

<div class="d-grid gap-2 d-md-flex justify-content-md-end">
    <button class="btn btn-success" @onclick="AbrirModal">Adicionar Categoria</button>
</div>

@if (mostrarModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditing ? "Editar Categoria" : "Adicionar Categoria"))</h5>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(modalErrorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            <strong>Erro:</strong> @modalErrorMessage
                        </div>
                    }
                    <EditForm Model="categoriaParaEditar" OnValidSubmit="OnSubmit" OnInvalidSubmit="ExibirErroValidacao">
                        <DataAnnotationsValidator />
                        <div class="form-group" style="margin-top: 10px">
                            <label for="Categoria">Categoria:</label>
                            <InputText id="Categoria" class="form-control" @bind-Value="categoriaParaEditar.Categoria" />
                            <ValidationMessage For="@(() => categoriaParaEditar.Categoria)" />
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="FecharModal">Fechar</button>
                            <button type="submit" class="btn btn-success">@((isEditing ? "Atualizar" : "Guardar"))</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<CategoriaDTO>? categorias;
    private string searchTerm = "";
    private bool mostrarModal = false;
    private CreateCategoriaDTO novaCategoria = new(); 
    private UpdateCategoriaDTO categoriaParaEditar = new(); 
    private bool isEditing = false;
    private int categoriaIdEmEdicao = 0;
    private string? modalErrorMessage;
    private string? pageErrorMessage;
    private string? registrationSuccessMessage;

    private List<CategoriaDTO> filteredCategorias =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? categorias ?? new List<CategoriaDTO>()
            : categorias?.Where(c =>
                c.Categoria.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList() ?? new List<CategoriaDTO>();

    private List<CategoriaDTO> CategoriasNaPagina
    {
        get
        {
            return filteredCategorias
                .Skip((paginaAtual - 1) * itensPorPagina)
                .Take(itensPorPagina)
                .ToList();
        }
    }

    private int paginaAtual = 1;
    private int itensPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling((double)(filteredCategorias.Count) / itensPorPagina);

    private bool PodeIrParaPaginaAnterior => paginaAtual > 1;
    private bool PodeIrParaPaginaProxima => paginaAtual < totalPaginas;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CarregarCategorias();
        }
    }

    private async Task CarregarCategorias()
    {
        categorias = await CategoriaService.GetAllCategoriasAsync();
        StateHasChanged();
    }

    private void AtualizarPesquisa(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private async Task ApagarCategoria(int id)
    {
        try
        {
            var sucesso = await CategoriaService.DeleteCategoriaAsync(id);

            if (sucesso)
            {
                registrationSuccessMessage = "Categoria apagada com sucesso!";
                pageErrorMessage = string.Empty;
                categorias?.RemoveAll(c => c.CategoriaId == id);
            }
            else
            {
                pageErrorMessage = "Erro ao apagar categoria.";
                registrationSuccessMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            pageErrorMessage = $"{ex.Message}";  
            registrationSuccessMessage = string.Empty;
        }

        StateHasChanged();
    }

    private void AbrirModal()
    {
        categoriaParaEditar = new UpdateCategoriaDTO();
        novaCategoria = new CreateCategoriaDTO();
        modalErrorMessage = string.Empty;
        pageErrorMessage = string.Empty;
        mostrarModal = true;
        isEditing = false;
    }

    private void FecharModal()
    {
        mostrarModal = false;
        isEditing = false;
        categoriaIdEmEdicao = 0;
        modalErrorMessage = string.Empty;
    }

    private void ExibirErroValidacao()
    {
        modalErrorMessage = "Todos os campos são obrigatórios.";
        StateHasChanged();
    }

    private async Task OnSubmit()
    {
        if (isEditing)
        {
            await AtualizarCategoria();
        }
        else
        {
            await AdicionarCategoria();
        }
    }


    private async Task AdicionarCategoria()
    {
        try
        {
            var resultado = await CategoriaService.CreateCategoriaAsync(novaCategoria);

            if (resultado != null)
            {
                modalErrorMessage = resultado;
            }
            else
            {
                modalErrorMessage = string.Empty; 
                mostrarModal = false; 
                await CarregarCategorias();
            }
        }
        catch (Exception ex)
        {
            modalErrorMessage = $"{ex.Message}"; 
            StateHasChanged();
        }
    }


    private void AbrirModalEdicao(CategoriaDTO categoria)
    {
        isEditing = true;
        categoriaIdEmEdicao = categoria.CategoriaId;

        categoriaParaEditar = new UpdateCategoriaDTO
        {
            CategoriaId = categoria.CategoriaId,
            Categoria = categoria.Categoria
        };

        modalErrorMessage = string.Empty;
        mostrarModal = true;
    }

    private async Task AtualizarCategoria()
    {
        try
        {
            var resultado = await CategoriaService.UpdateCategoriaAsync(categoriaParaEditar);

            if (resultado == null)
            {
                modalErrorMessage = "Erro ao atualizar categoria.";
            }
            else
            {
                modalErrorMessage = string.Empty;
                mostrarModal = false;
                await CarregarCategorias();
            }
        }
        catch (Exception ex)
        {
            modalErrorMessage = $"{ex.Message}";
            StateHasChanged();
        }
    }

    private void PaginaAnterior()
    {
        if (paginaAtual > 1)
        {
            paginaAtual--;
            StateHasChanged();
        }
    }

    private void PaginaProxima()
    {
        if (paginaAtual < totalPaginas)
        {
            paginaAtual++;
            StateHasChanged();
        }
    }
   

}

