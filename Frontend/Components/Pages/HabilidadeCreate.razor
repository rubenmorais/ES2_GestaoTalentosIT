@page "/habilidades/create"

@using Frontend.DtoClasses
@using Frontend.Services
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject HabilidadeService HabilidadeService

<h3>Criar Nova Habilidade</h3>

<div class="mb-3">
    <label for="nome">Nome:</label>
    <input id="nome" class="form-control" @bind="habilidade.Nome" />
</div>
<div class="mb-3">
    <label for="categoria">Categoria ID:</label>
    <input id="categoria" type="number" class="form-control" @bind="habilidade.Categoriaid" />
</div>
<div class="mb-3">
    <label for="criador">Criador ID:</label>
    <input id="criador" type="number" class="form-control" @bind="habilidade.Criadorid" />
</div>

<button class="btn btn-success" @onclick="Salvar">Guardar</button>
<button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>

@code {
    // Utilizando o DTO específico para criação (ajuste se necessário)
    private CreateHabilidadeDTO habilidade = new();

    private async Task Salvar()
    {
        // Chama o método do HabilidadeService que já está configurado com BaseAddress
        var erro = await HabilidadeService.CreateHabilidadeAsync(habilidade);
        if (erro == null)
        {
            // Sucesso: navega para a página de listagem de habilidades
            NavManager.NavigateTo("/habilidades");
        }
        else
        {
            await AlertAsync($"Erro ao criar a habilidade: {erro}");
        }
    }

    private void Cancelar()
    {
        NavManager.NavigateTo("/habilidades");
    }

    private Task AlertAsync(string message)
    {
        // Aqui, você pode integrar um modal ou alert usando IJSRuntime.
        Console.WriteLine(message);
        return Task.CompletedTask;
    }
}